# Docker Compose per Produzione Scaleway
# Ottimizzato per deployment cloud, sicurezza e performance

services:

  # Backend FastAPI - Produzione
  piazzati-backend:
    image: ${REGISTRY:-rg.fr-par.scw.cloud/piazzati}/piazzati-backend:${TAG:-latest}
    container_name: piazzati-backend-prod
    restart: always
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL:-}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - WORKERS=${WORKERS:-4}
    # Rimosse porte esposte - traffico tramite Load Balancer
    # ports: - rimosso per sicurezza
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    networks:
      - piazzati-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # PostgreSQL Exporter - Solo se database self-hosted
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.15.0
    container_name: piazzati-postgres-exporter-prod
    restart: always
    environment:
      DATA_SOURCE_NAME: ${POSTGRES_EXPORTER_URL}
    # ports: - rimosso, solo accesso interno
    networks:
      - piazzati-network
    profiles:
      - self-hosted-db  # Attivato solo se non si usa Managed Database
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'

  # Node Exporter per metriche sistema
  node-exporter:
    image: prom/node-exporter:v1.6.1
    container_name: piazzati-node-exporter-prod
    restart: always
    # ports: - rimosso per sicurezza
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - piazzati-network
    deploy:
      resources:
        limits:
          memory: 64M
          cpus: '0.05'

  # cAdvisor per metriche container
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    container_name: piazzati-cadvisor-prod
    restart: always
    # ports: - rimosso per sicurezza
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg
    networks:
      - piazzati-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.1'

  # Prometheus - Configurazione produzione
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: piazzati-prometheus-prod
    restart: always
    # ports: - accesso tramite Load Balancer
    volumes:
      - ./monitoring/prometheus.prod.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/alert-rules.yml:/etc/prometheus/alert-rules.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    depends_on:
      - piazzati-backend
    networks:
      - piazzati-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '0.5'
        reservations:
          memory: 1G
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Grafana - Configurazione produzione sicura
  grafana:
    image: grafana/grafana:10.2.0
    container_name: piazzati-grafana-prod
    restart: always
    # ports: - accesso tramite Load Balancer con SSL
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_SECURITY_SECRET_KEY=${GRAFANA_SECRET_KEY}
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
      - GF_SERVER_DOMAIN=${GRAFANA_DOMAIN:-localhost}
      - GF_SERVER_ROOT_URL=https://${GRAFANA_DOMAIN:-localhost}/
      - GF_DATABASE_TYPE=postgres
      - GF_DATABASE_HOST=${GRAFANA_DB_HOST}
      - GF_DATABASE_NAME=${GRAFANA_DB_NAME}
      - GF_DATABASE_USER=${GRAFANA_DB_USER}
      - GF_DATABASE_PASSWORD=${GRAFANA_DB_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - piazzati-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx reverse proxy con SSL
  nginx:
    image: nginx:1.25-alpine
    container_name: piazzati-nginx-prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - piazzati-backend
      - grafana
      - prometheus
    networks:
      - piazzati-network
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'

  # Redis per caching e sessioni (opzionale)
  redis:
    image: redis:7-alpine
    container_name: piazzati-redis-prod
    restart: always
    command: redis-server --requirepass ${REDIS_PASSWORD}
    # ports: - solo accesso interno
    volumes:
      - redis_data:/data
    networks:
      - piazzati-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.1'
    profiles:
      - with-redis  # Attivato opzionalmente

networks:
  piazzati-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/piazzati/data/prometheus
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/piazzati/data/grafana
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/piazzati/data/redis
  nginx_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/piazzati/logs/nginx

# ISTRUZIONI DEPLOYMENT SCALEWAY:
#
# 1. Setup variabili ambiente:
#    cp .env.example .env.prod
#    
# 2. Deploy stack completo:
#    docker-compose -f docker-compose.prod.yml --env-file .env.prod up -d
#
# 3. Deploy solo backend (per CI/CD):
#    docker-compose -f docker-compose.prod.yml --env-file .env.prod up -d piazzati-backend
#
# 4. Deploy con database self-hosted:
#    docker-compose -f docker-compose.prod.yml --profile self-hosted-db --env-file .env.prod up -d
#
# 5. Deploy con Redis:
#    docker-compose -f docker-compose.prod.yml --profile with-redis --env-file .env.prod up -d
#
# 6. Scale backend:
#    docker-compose -f docker-compose.prod.yml --env-file .env.prod up -d --scale piazzati-backend=3