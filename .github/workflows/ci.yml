name: PiazzaTi CI/CD

# Give the workflow the minimum permissions needed to upload code-scanning SARIF
# and to read repository contents. This is required for the CodeQL upload step
# to call GitHub's code scanning API (otherwise you'll see "Resource not
# accessible by integration" when running on non-fork runs).
permissions:
  contents: read
  security-events: write

on:
  push:
    branches: [ main, dev, feature/* ]
  pull_request:
    branches: [ main ]
  # allow manual runs from the Actions UI for immediate deploy/debug
  workflow_dispatch: {}

env:
  REGISTRY: rg.nl-ams.scw.cloud/piazzati/backend
  BACKEND_IMAGE: piazzati-backend
  FRONTEND_IMAGE: piazzati-frontend

jobs:
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    services:
      postgres:
        image: pgvector/pgvector:pg15
        env:
          POSTGRES_USER: piazzati_user
          POSTGRES_PASSWORD: piazzati_password
          POSTGRES_DB: db_piazzati
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U piazzati_user -d db_piazzati" 
          --health-interval 10s 
          --health-timeout 5s 
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install backend dependencies
        run: |
          cd backend
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint backend code
        run: |
          cd backend
          flake8 app --max-line-length=88 --extend-ignore=E203,W503

      - name: Run backend tests
        env:
          DATABASE_URL: postgresql://piazzati_user:piazzati_password@localhost:5432/db_piazzati
        run: |
          cd backend
          pytest tests/ -v --tb=short

      - name: Test Docker build
        run: |
          docker build -t ${{ env.BACKEND_IMAGE }}:test ./backend

  build-and-deploy:
    name: Build & Deploy to Scaleway
    needs: test
    runs-on: ubuntu-latest
    # Run when pushing to main OR when dispatched manually from Actions UI
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Debug registry secrets (non-sensitive)
        run: |
          echo "SCALEWAY_REGISTRY_USERNAME length: $(echo -n \"$SCALEWAY_REGISTRY_USERNAME\" | wc -c)"
          echo "SCALEWAY_REGISTRY_PASSWORD length: $(echo -n \"$SCALEWAY_REGISTRY_PASSWORD\" | wc -c)"
          if printf '%s' "$SCALEWAY_REGISTRY_PASSWORD" | grep -q $'\\n'; then
            echo "SCALEWAY_REGISTRY_PASSWORD contains a newline character"
          else
            echo "SCALEWAY_REGISTRY_PASSWORD has no trailing newline"
          fi
        env:
          SCALEWAY_REGISTRY_USERNAME: ${{ secrets.SCALEWAY_REGISTRY_USERNAME }}
          SCALEWAY_REGISTRY_PASSWORD: ${{ secrets.SCALEWAY_REGISTRY_PASSWORD }}

      - name: Log in to Scaleway Container Registry
        uses: docker/login-action@v3
        with:
          registry: rg.nl-ams.scw.cloud
          username: ${{ secrets.SCALEWAY_REGISTRY_USERNAME }}
          password: ${{ secrets.SCALEWAY_REGISTRY_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to Scaleway Instance
        env:
          SCALEWAY_INSTANCE_IP: ${{ secrets.SCALEWAY_INSTANCE_IP }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SCALEWAY_REGISTRY_USERNAME: ${{ secrets.SCALEWAY_REGISTRY_USERNAME }}
          SCALEWAY_REGISTRY_PASSWORD: ${{ secrets.SCALEWAY_REGISTRY_PASSWORD }}
          OLLAMA_MODEL_NAME: ${{ secrets.OLLAMA_MODEL_NAME }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H $SCALEWAY_INSTANCE_IP >> ~/.ssh/known_hosts

          # Add SSH keepalive options to avoid broken pipe / 255 on long-running remote tasks
          ssh -tt -o ServerAliveInterval=60 -o ServerAliveCountMax=3 -o TCPKeepAlive=yes -i ~/.ssh/id_rsa root@$SCALEWAY_INSTANCE_IP <<EOF
            # Enable strict failure handling and verbose trace for remote deploy steps
            set -euxo pipefail

            # Clone repository if missing, otherwise force-sync with origin/main
            if [ ! -d /opt/piazzati ]; then
              git clone https://github.com/MeryemeBanani/PiazzaTi.git /opt/piazzati
            fi
            cd /opt/piazzati

            # Try a small, safe cleanup to free disk: remove dangling docker objects and apt cache
            echo "[deploy] attempting safe disk cleanup (docker prune & apt clean)"
            docker system prune -af || true
            rm -rf /var/cache/apt/archives/* || true

            git fetch origin main
            git reset --hard origin/main
            git clean -fd || true

            # Ensure setup script is executable and run it (idempotent)
            if [ -f ./scripts/setup-server.sh ]; then
              echo "[deploy] Preparing scripts/setup-server.sh"
              chmod +x ./scripts/setup-server.sh || true
              echo "[deploy] Running scripts/setup-server.sh (this is idempotent)"
              MODEL_NAME="${OLLAMA_MODEL_NAME:-llama3.1:8b}" REPO_DIR="/opt/piazzati" bash ./scripts/setup-server.sh || echo "[deploy] setup-server.sh exited with non-zero status"
            else
              echo "[deploy] No scripts/setup-server.sh found — skipping server bootstrap"
            fi

            # Login to container registry (secrets expanded by runner)
            echo "$SCALEWAY_REGISTRY_PASSWORD" | docker login rg.nl-ams.scw.cloud -u "$SCALEWAY_REGISTRY_USERNAME" --password-stdin

            # Pull latest backend image
            docker compose pull piazzati-backend || true

            # Apply production environment config
            cp backend/.env.scaleway backend/.env || true

            # Deploy updated containers
            docker compose up -d --build

            # Health check: poll with timeouts and fail-fast with logs if unreachable
            echo "[deploy] Performing health check on http://localhost:8000/health"
            max_wait=120
            interval=5
            waited=0
            # Note: this heredoc is unquoted so the runner expands secrets; escape local variables
            until curl -sS --fail --max-time 10 http://localhost:8000/health >/dev/null; do
              if [ "\$waited" -ge "\$max_wait" ]; then
                echo "[deploy] Health check failed after \$max_wait s — dumping backend logs for debugging"
                # Print the last 200 log lines (non-follow) so the remote script doesn't block
                docker compose logs --no-color piazzati-backend --tail 200 || true
                exit 1
              fi
              echo "[deploy] Health check not ready yet; sleeping \$interval s (waited \$waited s)"
              sleep \$interval
              waited=\$((\$waited + \$interval))
            done
            echo "[deploy] Health check passed"

            # Final marker to clearly indicate remote script completion and force exit
            echo "[deploy] REMOTE SCRIPT FINISHED"
            exit 0
          EOF

  security-scan:
    name: Security Scan
    needs: test
    runs-on: ubuntu-latest
    # Run on pull requests and also when pushing to main (so production pushes get scanned)
    # Only run for pull requests originating from this repository (not forks)
    # or when pushing to main. Forked PRs can't use the repo's GITHUB_TOKEN
    # with security-events permission so uploading SARIF will fail there.
    if: ${{ (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository) || (github.event_name == 'push' && github.ref == 'refs/heads/main') }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './backend'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
