name: PiazzaTi CI/CD

permissions:
  contents: read
  security-events: write

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      image_override:
        description: 'Optional image (registry/image:tag) to deploy instead of the one built by CI'
        required: false
      run_provision:
        description: 'If true, start server provisioning (background) during deploy'
        required: false
        default: 'false'

env:
  # Fully qualified registry/repository. This should point at Scaleway registry repo.
  REGISTRY: rg.nl-ams.scw.cloud/piazzati/backend
  FRONTEND_IMAGE: piazzati-frontend

concurrency:
  group: piazzati-ci-${{ github.ref }}
  cancel-in-progress: false

jobs:
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    services:
      postgres:
        image: pgvector/pgvector:pg15
        env:
          POSTGRES_USER: piazzati_user
          POSTGRES_PASSWORD: piazzati_password
          POSTGRES_DB: db_piazzati
        ports: ['5432:5432']
        options: >-
          --health-cmd "pg_isready -U piazzati_user -d db_piazzati"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install backend requirements
        run: |
          cd backend
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint
        run: |
          cd backend
          flake8 app --max-line-length=88 --extend-ignore=E203,W503 || true

      - name: Run tests
        env:
          DATABASE_URL: postgresql://piazzati_user:piazzati_password@localhost:5432/db_piazzati
        run: |
          cd backend
          pytest tests/ -v --tb=short

  build:
    name: Build & Push Image
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Scaleway Registry
        uses: docker/login-action@v3
        with:
          registry: rg.nl-ams.scw.cloud
          username: ${{ secrets.SCALEWAY_REGISTRY_USERNAME }}
          password: ${{ secrets.SCALEWAY_REGISTRY_PASSWORD }}

      - name: Build and push backend image
        id: build-push
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ${{ env.REGISTRY }}:${{ github.sha }}
            ${{ env.REGISTRY }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Set build outputs
        id: set-image
        run: |
          # We use the SHA tag as canonical immutable tag
          echo "IMAGE_FULL=${REGISTRY}:${GITHUB_SHA}" >> $GITHUB_OUTPUT

    outputs:
      image_full: ${{ steps.set-image.outputs.IMAGE_FULL }}

  deploy:
    name: Deploy to Scaleway Instance
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout (for helper scripts)
        uses: actions/checkout@v4

      - name: Prepare SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SCALEWAY_INSTANCE_IP }} >> ~/.ssh/known_hosts

      - name: Determine IMAGE to deploy
        id: image
        run: |
          if [ -n "${{ github.event.inputs.image_override }}" ]; then
            echo "Using override image: ${{ github.event.inputs.image_override }}"
            echo "IMAGE_TO_DEPLOY=${{ github.event.inputs.image_override }}" >> $GITHUB_OUTPUT
          else
            echo "IMAGE_TO_DEPLOY=${{ needs.build.outputs.image_full }}" >> $GITHUB_OUTPUT
          fi

      - name: Deploy via SSH
        env:
          SCALEWAY_REGISTRY_USERNAME: ${{ secrets.SCALEWAY_REGISTRY_USERNAME }}
          SCALEWAY_REGISTRY_PASSWORD: ${{ secrets.SCALEWAY_REGISTRY_PASSWORD }}
          SCALEWAY_INSTANCE_IP: ${{ secrets.SCALEWAY_INSTANCE_IP }}
          OLLAMA_MODEL_NAME: ${{ secrets.OLLAMA_MODEL_NAME }}
          RUN_PROVISION: ${{ github.event.inputs.run_provision }}
        run: |
          set -euxo pipefail
          IMAGE_FULL="${{ steps.image.outputs.IMAGE_TO_DEPLOY }}"
          echo "[deploy] IMAGE_FULL=${IMAGE_FULL}"

          # Export registry credentials and flags into the remote shell, then run heredoc
          ssh -o ServerAliveInterval=60 -o ServerAliveCountMax=3 -o StrictHostKeyChecking=yes -i ~/.ssh/id_rsa root@${SCALEWAY_INSTANCE_IP} "export SCALEWAY_REGISTRY_USERNAME='${SCALEWAY_REGISTRY_USERNAME}' SCALEWAY_REGISTRY_PASSWORD='${SCALEWAY_REGISTRY_PASSWORD}' RUN_PROVISION='${RUN_PROVISION}' OLLAMA_MODEL_NAME='${OLLAMA_MODEL_NAME}' ; bash -s -- '${IMAGE_FULL}'" <<'EOF'
            set -euxo pipefail
            IMAGE_FULL="${1:-}"
            echo "[remote] IMAGE_FULL=$IMAGE_FULL"

            REPO_DIR=/opt/piazzati
            cd /tmp
            mkdir -p ${REPO_DIR}
            if [ ! -d ${REPO_DIR}/.git ]; then
              git clone https://github.com/MeryemeBanani/PiazzaTi.git ${REPO_DIR}
            fi
            cd ${REPO_DIR}
            git fetch origin main
            git reset --hard origin/main

            # Optionally start provisioning in background (non-blocking)
            if [ "${RUN_PROVISION:-false}" = "true" ] && [ -f ./scripts/setup-server.sh ]; then
              MODEL_NAME="${OLLAMA_MODEL_NAME:-llama3.1:8b}" REPO_DIR="${REPO_DIR}" nohup bash ./scripts/setup-server.sh > /var/log/setup-server.log 2>&1 &
              echo "[remote] started provisioning in background"
            fi

            # Login to registry
            echo "Logging in to registry"
            echo "${SCALEWAY_REGISTRY_PASSWORD}" | docker login rg.nl-ams.scw.cloud -u "${SCALEWAY_REGISTRY_USERNAME}" --password-stdin

            # Create compose override atomically
            tmpfile=$(mktemp /tmp/docker-compose.deploy.yml.XXXX)
            # write the small compose override without a nested here-doc (avoids indentation
            # issues when the script itself is indented inside the YAML file)
            printf '%s\n' "services:" "  piazzati-backend:" "    image: ${IMAGE_FULL}" > "$tmpfile"
            mv "$tmpfile" /opt/piazzati/docker-compose.deploy.yml
            echo "[remote] wrote /opt/piazzati/docker-compose.deploy.yml"

            # Try to pull with limited retries
            attempts=0
            until docker compose -f docker-compose.yml -f docker-compose.deploy.yml pull piazzati-backend; do
              attempts=$((attempts+1))
              echo "[remote] docker pull attempt $attempts failed"
              if [ "$attempts" -ge 3 ]; then
                echo "[remote] docker pull failed after $attempts attempts" >&2
                docker compose logs --no-color piazzati-backend --tail 200 || true
                exit 1
              fi
              sleep $((attempts * 5))
            done

            docker compose -f docker-compose.yml -f docker-compose.deploy.yml up -d

            # health check
            max_wait=60
            interval=3
            waited=0
            until curl -sS --fail --max-time 10 http://localhost:8000/health >/dev/null; do
              if [ "$waited" -ge "$max_wait" ]; then
                echo "[remote] Health check failed after $max_wait s" >&2
                docker compose logs --no-color piazzati-backend --tail 200 || true
                exit 1
              fi
              sleep $interval
              waited=$((waited + interval))
            done

            # record deployed tag atomically AFTER success
            mkdir -p /var/lib/piazzati
            if printf '%s' "$IMAGE_FULL" | grep -q ':'; then
              echo "${IMAGE_FULL##*:}" > /var/lib/piazzati/last_deployed_tag.tmp || true
            else
              echo "$IMAGE_FULL" > /var/lib/piazzati/last_deployed_tag.tmp || true
            fi
            mv /var/lib/piazzati/last_deployed_tag.tmp /var/lib/piazzati/last_deployed_tag
            echo "[remote] wrote last_deployed_tag"

            echo "[remote] deploy finished"
          EOF

  security-scan:
    name: Security Scan (Trivy)
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Trivy FS scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './backend'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
